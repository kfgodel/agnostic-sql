package ar.com.kfgodel.asql;

import ar.com.dgarcia.javaspec.api.JavaSpec;
import ar.com.dgarcia.javaspec.api.JavaSpecRunner;
import ar.com.kfgodel.asql.api.types.DataType;
import ar.com.kfgodel.asql.api.vendors.Vendor;
import ar.com.kfgodel.asql.impl.AsqlBuilderImpl;
import ar.com.kfgodel.asql.impl.interpreter.TemplateInterpreter;
import ar.com.kfgodel.asql.impl.model.types.TypeReference;
import org.junit.runner.RunWith;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Created by kfgodel on 14/07/15.
 */
@RunWith(JavaSpecRunner.class)
public class DataTypeTest extends JavaSpec<AsqlTestContext> {
    @Override
    public void define() {
        AsqlBuilderImpl asql = AsqlBuilderImpl.create();

        describe("agnostic data types", () -> {
            it("have ansi translations", () -> {
                TemplateInterpreter ansiInterpreter = TemplateInterpreter.create(Vendor.ansi());

                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.bigInteger()))).isEqualTo("bigint");
                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.integer()))).isEqualTo("integer");

                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.shortString()))).isEqualTo("VARCHAR(255)");
                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.largeText()))).isEqualTo("clob");

                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.timestamp()))).isEqualTo("timestamp");
                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.date()))).isEqualTo("date");

                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.pk()))).isEqualTo("bigint generated by default as identity (start with 1)");
                assertThat(ansiInterpreter.translate(TypeReference.create(DataType.fk()))).isEqualTo("bigint");
            });
            it("have sqlserver translations", () -> {
                TemplateInterpreter sqlserverInterpreter = TemplateInterpreter.create(Vendor.sqlserver());

                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.bigInteger()))).isEqualTo("numeric(19,0)");
                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.integer()))).isEqualTo("numeric(19,0)");

                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.shortString()))).isEqualTo("VARCHAR(255)");
                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.largeText()))).isEqualTo("text");

                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.timestamp()))).isEqualTo("datetime");
                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.date()))).isEqualTo("date");

                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.pk()))).isEqualTo("numeric(19,0) identity");
                assertThat(sqlserverInterpreter.translate(TypeReference.create(DataType.fk()))).isEqualTo("numeric(19,0)");
            });
            it("have hsqldb translations", () -> {
                TemplateInterpreter hsqlInterpreter = TemplateInterpreter.create(Vendor.hsqldb());

                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.bigInteger()))).isEqualTo("bigint");
                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.integer()))).isEqualTo("integer");

                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.shortString()))).isEqualTo("VARCHAR(255)");
                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.largeText()))).isEqualTo("clob");

                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.timestamp()))).isEqualTo("timestamp");
                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.date()))).isEqualTo("date");

                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.pk()))).isEqualTo("bigint generated by default as identity (start with 1)");
                assertThat(hsqlInterpreter.translate(TypeReference.create(DataType.fk()))).isEqualTo("bigint");
            });
        });


    }
}