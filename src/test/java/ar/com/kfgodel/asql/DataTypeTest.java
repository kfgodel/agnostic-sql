package ar.com.kfgodel.asql;

import ar.com.dgarcia.javaspec.api.JavaSpec;
import ar.com.dgarcia.javaspec.api.JavaSpecRunner;
import ar.com.kfgodel.asql.api.types.DataType;
import ar.com.kfgodel.asql.api.vendors.Vendor;
import ar.com.kfgodel.asql.impl.interpreter.TemplateInterpreter;
import org.junit.runner.RunWith;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Created by kfgodel on 14/07/15.
 */
@RunWith(JavaSpecRunner.class)
public class DataTypeTest extends JavaSpec<AsqlTestContext> {
    @Override
    public void define() {

        describe("agnostic data types", () -> {
            it("have ansi translations", () -> {
                TemplateInterpreter ansiInterpreter = TemplateInterpreter.create(Vendor.ansi());

                assertThat(ansiInterpreter.translate(DataType.bigInteger())).isEqualTo("bigint");
                assertThat(ansiInterpreter.translate(DataType.integer())).isEqualTo("integer");

                assertThat(ansiInterpreter.translate(DataType.shortString())).isEqualTo("VARCHAR(255)");
                assertThat(ansiInterpreter.translate(DataType.largeText())).isEqualTo("clob");

                assertThat(ansiInterpreter.translate(DataType.timestamp())).isEqualTo("timestamp");
                assertThat(ansiInterpreter.translate(DataType.date())).isEqualTo("date");

                assertThat(ansiInterpreter.translate(DataType.pk())).isEqualTo("bigint generated by default as identity (start with 1)");
                assertThat(ansiInterpreter.translate(DataType.fk())).isEqualTo("bigint");

                assertThat(ansiInterpreter.translate(DataType.booleanic())).isEqualTo("boolean");
            });
            it("have sqlserver translations", () -> {
                TemplateInterpreter sqlserverInterpreter = TemplateInterpreter.create(Vendor.sqlserver());

                assertThat(sqlserverInterpreter.translate(DataType.bigInteger())).isEqualTo("numeric(19,0)");
                assertThat(sqlserverInterpreter.translate(DataType.integer())).isEqualTo("numeric(19,0)");

                assertThat(sqlserverInterpreter.translate(DataType.shortString())).isEqualTo("VARCHAR(255)");
                assertThat(sqlserverInterpreter.translate(DataType.largeText())).isEqualTo("text");

                assertThat(sqlserverInterpreter.translate(DataType.timestamp())).isEqualTo("datetime");
                assertThat(sqlserverInterpreter.translate(DataType.date())).isEqualTo("date");

                assertThat(sqlserverInterpreter.translate(DataType.pk())).isEqualTo("numeric(19,0) identity");
                assertThat(sqlserverInterpreter.translate(DataType.fk())).isEqualTo("numeric(19,0)");

                assertThat(sqlserverInterpreter.translate(DataType.booleanic())).isEqualTo("bit");
            });
            it("have hsqldb translations", () -> {
                TemplateInterpreter hsqlInterpreter = TemplateInterpreter.create(Vendor.hsqldb());

                assertThat(hsqlInterpreter.translate(DataType.bigInteger())).isEqualTo("bigint");
                assertThat(hsqlInterpreter.translate(DataType.integer())).isEqualTo("integer");

                assertThat(hsqlInterpreter.translate(DataType.shortString())).isEqualTo("VARCHAR(255)");
                assertThat(hsqlInterpreter.translate(DataType.largeText())).isEqualTo("clob");

                assertThat(hsqlInterpreter.translate(DataType.timestamp())).isEqualTo("timestamp");
                assertThat(hsqlInterpreter.translate(DataType.date())).isEqualTo("date");

                assertThat(hsqlInterpreter.translate(DataType.pk())).isEqualTo("bigint generated by default as identity (start with 1)");
                assertThat(hsqlInterpreter.translate(DataType.fk())).isEqualTo("bigint");

                assertThat(hsqlInterpreter.translate(DataType.booleanic())).isEqualTo("bit");
            });
        });


    }
}